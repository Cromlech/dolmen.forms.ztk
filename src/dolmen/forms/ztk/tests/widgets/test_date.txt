=============================
dolmen.forms.ztk date widgets
=============================

Let's create some interface using dates::

  >>> from zope import schema, interface
  >>> from zope.interface.verify import verifyObject
  >>> import datetime

  >>> class IDayInfo(interface.Interface):
  ...     date = schema.Date(title='Current date')

  >>> class IAppointment(interface.Interface):
  ...     when = schema.Datetime(title='When')

And some content for them::

  >>> from cromlech.browser.testing import TestRequest
  >>> request = TestRequest()

  >>> @interface.implementer(IDayInfo)
  ... class DayInfo(object):
  ...    date = None

  >>> day = DayInfo()
  >>> day.date = datetime.date(1983, 4, 25)

  >>> @interface.implementer(IAppointment)
  ... class Appointment(object):
  ...    when = None
  >>> appointment = Appointment()


Field
-----

You can get a field for a date::

  >>> from dolmen.forms.base import Fields
  >>> from dolmen.forms.base import interfaces

  >>> dayFields = Fields(IDayInfo)
  >>> dateField = dayFields['date']
  >>> dateField
  <DateSchemaField Current date>
  >>> verifyObject(interfaces.IField, dateField)
  True

And one for datetime as well::

  >>> appointmentFields = Fields(IAppointment)
  >>> whenField = appointmentFields['when']
  >>> whenField
  <DatetimeSchemaField When>
  >>> verifyObject(interfaces.IField, whenField)
  True


Widget
------

You can have a widget for a day. The input value is a formated version
of the date, based on the locale of the request::

  >>> from dolmen.forms.base import Widgets, FormData

  >>> dailyForm = FormData(day, request)
  >>> dailyForm.ignoreContent = False

  >>> dailyWidgets = Widgets(
  ...     dayFields,
  ...     form=dailyForm,
  ...     request=request)
  >>> dailyWidgets.update()
  >>> len(dailyWidgets)
  1

  >>> dailyWidget = dailyWidgets['form.field.date']
  >>> dailyWidget
  <DateFieldWidget Current date>

  >>> verifyObject(interfaces.IFieldWidget, dailyWidget)
  True

  >>> dailyWidget.inputValue()
  '4/25/83'


Widget extractor
----------------

You can extract a value from the request. It is a bit more difficult
here because the parsing is a bit more advanced::

  >>> dateRequest = TestRequest(form={
  ...     'form.field.date': '06/10/1982'})
  >>> niceDayData = FormData(day, dateRequest)

  >>> niceDayExtractor = interfaces.IWidgetExtractor(
  ...      dateField, niceDayData, dateRequest)

  >>> verifyObject(interfaces.IWidgetExtractor, niceDayExtractor)
  True
  >>> niceDayExtractor.extract()
  (datetime.date(1982, 6, 10), None)

If date is empty it means None::

  >>> dateRequest = TestRequest(form={
  ...     'form.field.date': ''})
  >>> niceDayData = FormData(day, dateRequest)

  >>> niceDayExtractor = interfaces.IWidgetExtractor(
  ...      dateField, niceDayData, dateRequest)
  >>> niceDayExtractor.extract()
  (None, None)
  
  
Now if you give an invalid date you will have an error::

  >>> invalidDateRequest = TestRequest(form={
  ...     'form.field.date': 'the best day ever'})
  >>> invalidDayData = FormData(day, invalidDateRequest)

  >>> invalidDayExtractor = interfaces.IWidgetExtractor(
  ...      dateField, invalidDayData, invalidDateRequest)

  >>> verifyObject(interfaces.IWidgetExtractor, invalidDayExtractor)
  True
  >>> invalidDayExtractor.extract()
  (None, 'Unknown date pattern')

hidden mode
-------------

The extractor also work in HIDDEN mode::

  >>> dateRequest = TestRequest(form={
  ...     'form.field.date': '06/10/1982'})
  >>> niceDayData = FormData(day, dateRequest)

  >>> niceDayExtractor = interfaces.IWidgetExtractor(
  ...      dateField, niceDayData, dateRequest, name='hidden')

  >>> niceDayExtractor.extract()
  (datetime.date(1982, 6, 10), None)

