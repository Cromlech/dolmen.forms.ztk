==============================
dolmen.forms.ztk choice widget
==============================

Simple case
===========

First we need a choice:

  >>> from zope import interface, schema
  >>> from zope.schema.vocabulary import SimpleVocabulary, SimpleTerm
  >>> from zope.interface.verify import verifyObject

  >>> def display_vocabulary(values):
  ...     for value in values:
  ...         print("%r %r %r" % (value.value, value.token, value.title))

  >>> letter_vocabulary = SimpleVocabulary([
  ...     SimpleTerm(value='A', token='a1', title='Letter A'),
  ...     SimpleTerm(value='B', token='b1', title='Letter B'),
  ...     SimpleTerm(value='C', token='c1', title='Letter C')])

  >>> class ISimpleChoice(interface.Interface):
  ...     choice = schema.Choice(
  ...         title="My favorite letter",
  ...         source=letter_vocabulary)


And we will need a content and a request to test:

  >>> from cromlech.browser.testing import TestRequest
  >>> request = TestRequest()

  >>> @interface.implementer(ISimpleChoice)
  ... class SimpleContent(object):
  ...    choice = None

  >>> content = SimpleContent()
  >>> content.choice = 'B'

  >>> broken_content = SimpleContent()
  >>> broken_content.choice = 'Z'


Field
-----

So now you can create a field, and get a choice field:

  >>> from dolmen.forms.base import Fields
  >>> from dolmen.forms.base import interfaces

  >>> simple_choice_fields = Fields(ISimpleChoice)
  >>> simple_field = simple_choice_fields['choice']
  >>> simple_field
  <ChoiceSchemaField My favorite letter>

  >>> simple_field.source is letter_vocabulary
  True

  >>> simple_field.validate('A')
  >>> simple_field.validate('foo')
  'Constraint not satisfied'

  >>> verifyObject(interfaces.IField, simple_field)
  True


Pluggable source
----------------

  >>> class IDuckChoice(interface.Interface):
  ...     duck = schema.Choice(
  ...         title="Ducks",
  ...         source='ducks')


A pluggable schema will need a factory:

  >>> duck_fields = Fields(IDuckChoice)
  >>> print(duck_fields['duck'].source)
  Traceback (most recent call last):
  ...
  zope.interface.interfaces.ComponentLookupError: Could not find component from sources () to target <InterfaceClass zope.schema.interfaces.IVocabularyFactory>.

  >>> from zope.interface import provider
  >>> from zope.schema.interfaces import IVocabularyFactory

  >>> @provider(IVocabularyFactory)
  ... def donald_nephews(context):
  ...     return SimpleVocabulary([
  ...         SimpleTerm(value='huey', token='h', title='Huey'),
  ...         SimpleTerm(value='dewey', token='d', title='Dewey'),
  ...         SimpleTerm(value='louie', token='l', title='Louie')])

  >>> from crom import implicit
  >>> implicit.registry.register(
  ...     tuple(), IVocabularyFactory, 'ducks', donald_nephews)

  >>> print(duck_fields['duck'].source)
  <function donald_nephews at ...>

  >>> print([i.title for i in duck_fields['duck'].getChoices(object())])
  ['Huey', 'Dewey', 'Louie']


Widget
------

You have an associated widget:

  >>> from dolmen.forms.base import Widgets, FormData, DISPLAY

  >>> simple_form = FormData(content, request)
  >>> simple_form.ignoreContent = False

  >>> simple_widgets = Widgets(
  ...     simple_choice_fields,
  ...     form=simple_form,
  ...     request=request)

  >>> simple_widgets.update()

  >>> simple_widget = simple_widgets['form.field.choice']
  >>> simple_widget
  <ChoiceFieldWidget My favorite letter>

  >>> simple_widget.inputValue()
  'b1'

  >>> print(simple_widget.render())  # doctest: +NORMALIZE_WHITESPACE
  <select id="form-field-choice" name="form.field.choice" class="field field-required" required="required">
    <option value="a1">Letter A</option>
    <option value="b1" selected="selected">Letter B</option>
    <option value="c1">Letter C</option>
  </select>

Display Widget
--------------

We have a display widget that display a value with the correct title:

  >>> display_form = FormData(content, request)
  >>> display_form.ignoreContent = False
  >>> display_form.ignoreRequest = True
  >>> display_form.mode = DISPLAY

  >>> display_widgets = Widgets(
  ...     simple_choice_fields,
  ...     form=display_form,
  ...     request=request)

  >>> display_widgets.update()

  >>> display_widget = display_widgets['form.field.choice']
  >>> display_widget
  <ChoiceDisplayWidget My favorite letter>

  >>> print(display_widget.render())  # doctest: +NORMALIZE_WHITESPACE
  Letter B

You can display a content that have a value which is not in the
vocabulary. Nothing will be displayed:

  >>> broken_display_form = FormData(broken_content, request)
  >>> broken_display_form.ignoreContent = False
  >>> broken_display_form.ignoreRequest = True
  >>> broken_display_form.mode = DISPLAY

  >>> broken_display_widgets = Widgets(
  ...     simple_choice_fields,
  ...     form=broken_display_form,
  ...     request=request)

  >>> broken_display_widgets.update()

  >>> broken_display_widget = broken_display_widgets['form.field.choice']
  >>> broken_display_widget
  <ChoiceDisplayWidget My favorite letter>

  >>> print(broken_display_widget.render())  # doctest: +NORMALIZE_WHITESPACE
  <BLANKLINE>

Extractor
---------

We need a custom extractor as the token value used in the form can be
different than the real value:

  >>> from dolmen.forms.base import interfaces

  >>> simple_extractor = interfaces.IWidgetExtractor(
  ...      simple_field, simple_form, request)

  >>> simple_extractor
  <dolmen.forms.ztk.widgets.choice.ChoiceWidgetExtractor object at ...>
  >>> simple_extractor.extract()
  (<Marker NO_VALUE>, None)

Let's now do it with a value:

  >>> simple_request = TestRequest(
  ...    form={simple_widget.identifier: 'a1', })

  >>> simple_extractor = interfaces.IWidgetExtractor(
  ...    simple_field, simple_form, simple_request)

  >>> simple_extractor.extract()
  ('A', None)

And a value which is not in the vocabulary:

  >>> broken_request = TestRequest(
  ...    form={simple_widget.identifier: 'z42', })

  >>> broken_extractor = interfaces.IWidgetExtractor(
  ...    simple_field, simple_form, broken_request)

  >>> broken_extractor.extract()
  (None, 'Invalid value')

hidden mode
-------------

The extractor also work in HIDDEN mode::

  >>> simple_request = TestRequest(
  ...    form={simple_widget.identifier: 'a1', })

  >>> simple_extractor = interfaces.IWidgetExtractor(
  ...    simple_field, simple_form, simple_request, name='hidden')

  >>> simple_extractor.extract()
  ('A', None)


Context binded source
=====================

Let's define a source which need the context to produce its values,
and an interface for it:

  >>> from zope.interface import provider
  >>> from zope.schema.interfaces import IContextSourceBinder

  >>> @provider(IContextSourceBinder)
  ... def secondVocabulary(context):
  ...     return letter_vocabulary

  >>> class ISecondChoice(interface.Interface):
  ...     choice = schema.Choice(
  ...         title="My Choice",
  ...         source=secondVocabulary)

  >>> @interface.implementer(ISecondChoice)
  ... class SecondContent(object):
  ...    choice = None

  >>> content = SecondContent()
  >>> content.choice = 'C'

Field
-----

So now you can create a field, and get a choice field:

  >>> from dolmen.forms.base import Fields

  >>> secondChoiceFields = Fields(ISecondChoice)
  >>> secondField = secondChoiceFields['choice']
  >>> secondField
  <ChoiceSchemaField My Choice>
  >>> secondField.source is secondVocabulary
  True

  >>> choices = secondField.getChoices(None)
  >>> choices
  <zope.schema.vocabulary.SimpleVocabulary object at ...>
  >>> display_vocabulary(choices)
  'A' 'a1' 'Letter A'
  'B' 'b1' 'Letter B'
  'C' 'c1' 'Letter C'

  >>> secondField.validate('A')
  >>> secondField.validate(42)
  'Constraint not satisfied'

Widget
------

You have an associated widget:

  >>> from dolmen.forms.base import Widgets, FormData

  >>> secondSub = FormData(content, request)
  >>> secondSub.ignoreContent = False

  >>> secondWidgets = Widgets(
  ...     secondChoiceFields,
  ...     form=secondSub,
  ...     request=request)

  >>> secondWidgets.update()

  >>> secondWidget = secondWidgets['form.field.choice']
  >>> secondWidget
  <ChoiceFieldWidget My Choice>

  >>> secondWidget.inputValue()
  'c1'

  >>> print(secondWidget.render())  # doctest: +NORMALIZE_WHITESPACE
  <select id="form-field-choice" name="form.field.choice" class="field field-required" required="required">
    <option value="a1">Letter A</option>
    <option value="b1">Letter B</option>
    <option value="c1" selected="selected">Letter C</option>
  </select>
