===============================
dolmen.forms.ztk boolean widget
===============================

We need first a boolean:

  >>> from zope import interface, schema
  >>> from zope.interface.verify import verifyObject

  >>> class IQuestion(interface.Interface):
  ...     answer = schema.Bool(title=u"Do you like zeam?")

And a test content and request:

  >>> from cromlech.browser.testing import TestRequest
  >>> request = TestRequest()

  >>> class Question(object):
  ...    interface.implements(IQuestion)
  ...    answer = True
  >>> content = Question()


Field
-----

So now you can create a field, and get a boolean field:

  >>> from dolmen.forms.base import Fields
  >>> from dolmen.forms.base import interfaces

  >>> fields = Fields(IQuestion)
  >>> booleanField = fields['answer']
  >>> booleanField
  <BooleanSchemaField Do you like zeam?>

  >>> verifyObject(interfaces.IField, booleanField)
  True


Widget
------

You have an associated widget:

  >>> from dolmen.forms.base import Widgets, FormData

  >>> sub = FormData(content, request)
  >>> sub.ignoreContent = False

  >>> widgets = Widgets(fields, form=sub, request=request)
  >>> widgets.update()

  >>> booleanWidget = widgets['form.field.answer']
  >>> booleanWidget
  <CheckBoxWidget Do you like zeam?>

  >>> verifyObject(interfaces.IWidget, booleanWidget)
  True

  >>> print booleanWidget.render()
  <input id="form-field-answer" name="form.field.answer"
         class="field field-bool field-required"
         checked="checked" value="True" type="checkbox" />
  <input value="True" type="hidden"
         name="form.field.answer.present" />


Extractor
---------

And finaly we have an extractor. If there is nothing in the request
the value is NO_VALUE:


  >>> falseExtractor = interfaces.IWidgetExtractor(
  ...      booleanField, sub, request)

  >>> falseExtractor
  <dolmen.forms.ztk.widgets.bool.CheckBoxWidgetExtractor object at ...>
  >>> falseExtractor.extract()
  (<Marker NO_VALUE>, None)

  >>> verifyObject(interfaces.IWidgetExtractor, falseExtractor)
  True

And if there is True in the request that means the checkbox is
checked. However, nothing will happen unless we have the 'presence'
marker in the form data too:

  >>> trueRequest = TestRequest(
  ...         form={booleanWidget.identifier: u'True', })

  >>> extractor = interfaces.IWidgetExtractor(
  ...      booleanField, sub, trueRequest)

  >>> extractor.extract()
  (<Marker NO_VALUE>, None)


Once we add the presence marker, it works:

  >>> trueRequest = TestRequest(
  ...         form={booleanWidget.identifier: u'True',
  ...               booleanWidget.identifier + '.present': u'True'})

  >>> extractor = interfaces.IWidgetExtractor(
  ...      booleanField, sub, trueRequest)

  >>> extractor.extract()
  (True, None)


The string 'True' is the only accepted valid value:

  >>> trueRequest = TestRequest(
  ...         form={booleanWidget.identifier: u'Something',
  ...               booleanWidget.identifier + '.present': u'True'})

  >>> extractor = interfaces.IWidgetExtractor(
  ...      booleanField, sub, trueRequest)

  >>> extractor.extract()
  (False, None)


hidden mode
-------------

The extractor also work in HIDDEN mode::

  >>> trueRequest = TestRequest(
  ...         form={booleanWidget.identifier: u'True',
  ...               booleanWidget.identifier + '.present': u'True'})

  >>> extractor = interfaces.IWidgetExtractor(
  ...      booleanField, sub, request, name='hidden')
  >>> extractor
  <dolmen.forms.ztk.widgets.bool.HiddenCheckBoxWidgetExtractor object at ...>
  >>> extractor.extract()
  (<Marker NO_VALUE>, None)

  >>> extractor = interfaces.IWidgetExtractor(
  ...      booleanField, sub, trueRequest, name='hidden')

  >>> extractor.extract()
  (True, None)

