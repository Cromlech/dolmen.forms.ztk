================
dolmen.forms.ztk
================

Interfaces can be validated, if they contain invariants. Invariants
are explicit contacts defining constraints on the data.


Single invariant
================

Definition
----------

  >>> from zope.schema import Password
  >>> from zope.interface import invariant, Interface
  >>> from zope.interface.exceptions import Invalid

  >>> class IPasswords(Interface):
  ...     passwd = Password(
  ...         title="Password",
  ...         description="Type the password.",
  ...         required=True)
  ...
  ...     verify = Password(
  ...         title="Password checking",
  ...         description="Retype the password.",
  ...         required=True)
  ...
  ...     @invariant
  ...     def check_pass(data):
  ...         if data.passwd != data.verify:
  ...             raise Invalid("Mismatching passwords!")


Instanciation
-------------

  >>> from dolmen.forms.base import Fields, FormData
  >>> from cromlech.browser.testing import TestRequest
  >>> form = FormData(object(), TestRequest())
  >>> fields = Fields(IPasswords)

  >>> from dolmen.forms.ztk import InvariantsValidation
  >>> validator = InvariantsValidation(fields, form)

  >>> print(validator)
  <dolmen.forms.ztk.validation.InvariantsValidation object at ...>

  >>> print(validator.interfaces)
  [<InterfaceClass builtins.IPasswords>]


Providing some data
-------------------

  >>> from dolmen.forms.base.components import FieldsValues

  >>> data = FieldsValues(form, fields)
  >>> data.update({'passwd': 'test', 'verify': 'nopass'})
  >>> print(validator.validate(data))
  [Invalid('Mismatching passwords!',)]

  >>> data = FieldsValues(form, fields)
  >>> data.update({'passwd': 'test', 'verify': 'test'})
  >>> print(validator.validate(data))
  []


Multiple invariants
===================

Definition
----------

  >>> from zope.schema import Int, Choice

  >>> class IAgeAndLegals(Interface):
  ...    age = Int(
  ...        default=0,
  ...        title="Enter your age.",
  ...        required=True)
  ...        
  ...    accept = Choice(
  ...        title="I accept the conditions of use.",
  ...        required=True,
  ...        values=["I accept", "I disapprove"])
  ...
  ...    @invariant
  ...    def check_age(data):
  ...        if data.age < 18:
  ...            raise Invalid("You must be at least 18 to proceed.")
  ...
  ...    @invariant
  ...    def check_legals(data):
  ...        if data.accept != "I accept":
  ...            raise Invalid("You can not proceed if you disagree.")


Instanciation
-------------

  >>> form = FormData(object(), TestRequest())
  >>> fields = Fields(IAgeAndLegals)
  >>> validator = InvariantsValidation(fields, form)

  >>> print(validator)
  <dolmen.forms.ztk.validation.InvariantsValidation object at ...>

  >>> print(validator.interfaces)
  [<InterfaceClass builtins.IAgeAndLegals>]


Providing some data
-------------------

  >>> data = FieldsValues(form, fields)
  >>> data.update({'age': 17, 'accept': "I disapprove"})
  >>> print(validator.validate(data))
  [Invalid('You must be at least 18 to proceed.',),
   Invalid('You can not proceed if you disagree.',)]

  >>> data = FieldsValues(form, fields)
  >>> data.update({'age': 17, 'accept': "I accept"})
  >>> print(validator.validate(data))
  [Invalid('You must be at least 18 to proceed.',)]

  >>> data = FieldsValues(form, fields)
  >>> data.update({'age': 19, 'accept': "I accept"})
  >>> print(validator.validate(data))
  []


Invariant involving values not in form
======================================

If some attributes used by invariant computation are not in the form the values
will be ask to datamanager::

  >>> country_data = {'Korea': 17, 'France':18}

  >>> class IAdult(Interface):
  ...    age = Int(
  ...        title="Enter your age.",
  ...        required=True)
  ...        
  ...    country = Choice(
  ...        title="Country",
  ...        required=True,
  ...        values=['Korea', 'France'])
  ...
  ...    @invariant
  ...    def check_age(data):
  ...        if data.age and data.country:
  ...            if data.age < country_data[data.country]:
  ...               raise Invalid("You must be major to proceed.")



Instanciation
-------------

We will have two form permitting to edit already existing object, but
just the age::

  >>> class Person(object):
  ... 
  ...     def __init__(self, country, age):
  ...         self.country, self.age = country, age

  >>> edit_french = FormData(Person('France', None), TestRequest())
  >>> edit_korean = FormData(Person('Korea', None), TestRequest())
  >>> fields = Fields(IAdult).omit('country')


Providing some data
-------------------

Let's edit the french and check

  >>> data = FieldsValues(edit_french, fields)
  >>> data.update({'age': 17})
  >>> print(InvariantsValidation(fields, edit_french).validate(data))
  [Invalid('You must be major to proceed.',)]

  >>> data.update({'age': 18})
  >>> print(InvariantsValidation(fields, edit_french).validate(data))
  []

  >>> data = FieldsValues(edit_korean, fields)
  >>> data.update({'age': 17})
  >>> print(InvariantsValidation(fields, edit_korean).validate(data))
  []


Form integration
================

Integration environment
-----------------------

  >>> from dolmen.forms.base import Form, Fields

  >>> class SomeContent(object):
  ...     pass

  >>> from cromlech.browser.testing import TestResponse

  >>> class MyLegalPage(Form):
  ...     responseFactory = TestResponse
  ...     fields = Fields(IAgeAndLegals)
  ...     dataValidators = [InvariantsValidation]
  ...     ignoreRequest = False
  ...     ignoreContent = True

  >>> content = SomeContent()


Erroneous submissions
---------------------

Let's try an empty request. There is two invariants, so that generate
two errors for the form itself:

  >>> request = TestRequest(form={'age': 10})
  >>> form = MyLegalPage(content, request)
  >>> form.update()

  >>> from dolmen.forms.base import NO_VALUE
  >>> data, errors = form.extractData()
  >>> assert data == {'age': NO_VALUE, 'accept': NO_VALUE}

  >>> list(errors)
  [<Error Missing required value.>, <Error Missing required value.>, <Errors for 'form'>]

  >>> list(errors['form'])
  [<Error You must be at least 18 to proceed.>,
   <Error You can not proceed if you disagree.>]

  >>> list(form.formErrors)
  [<Error You must be at least 18 to proceed.>,
   <Error You can not proceed if you disagree.>]
